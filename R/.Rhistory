start_task()
print('Closing connection to raw database server...')
# run transformation
print('Transformation step started...')
run_model_1()
print('Transformation step completed...')
# append to Transformed database
print('Starting connection to transformed database server...')
save_transformed_data()
print('Database updated successfully!')
print('Closing connection to transformed database server...')
# Save last_run
last_run_file <- paste0(file_path, "last_run_time.txt")
writeLines(as.character(Sys.time()), last_run_file)
print("'last_run' saved!")
print('Data pipeline completed')
}
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
start_task()
run_model_1()
# Load library
suppressPackageStartupMessages(library(RODBC))
suppressPackageStartupMessages(library(lubridate))
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
file_deposit <- "C:/Users/hyber/gym-dbms/R/raw_extract/"
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
# Save into R
saveRDS(raw_users, paste0(file_deposit, "raw.users.RDS"))
saveRDS(raw_visits, paste0(file_deposit, "raw.visits.RDS"))
saveRDS(raw_staff, paste0(file_deposit, "raw.staff.RDS"))
# Disconnect from SQL
odbcClose(db_con_raw)
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
# Save into R
saveRDS(raw_users, paste0(file_deposit, "raw.users.RDS"))
saveRDS(raw_visits, paste0(file_deposit, "raw.visits.RDS"))
saveRDS(raw_staff, paste0(file_deposit, "raw.staff.RDS"))
# Disconnect from SQL
odbcClose(db_con_raw)
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
users <- readRDS(paste0(file_deposit, "raw.users.RDS"))
region <- readRDS(paste0(file_deposit, "raw.users.RDS"))
staff <- readRDS(paste0(file_deposit, "raw.staff.RDS"))
# Join tables
df <- visits %>%
left_join(select(users, Id, FullName, Gender, Membership),
by = c("UserId" = "Id")) %>%
left_join(select(staff, Id, FullName),
by = c('StaffId' = 'Id'))
# Clean column names
df <- df %>%
rename('Member' = FullName.x,
'Staff' = FullName.y) %>%
select(6:8, 5, 4, 9) %>%
mutate(Time_stamp = as.character(Sys.time()))
# Save df
saveRDS(df, paste0(file_path, "df.RDS"))
run_model_1 <- function() {
# Load libraries
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(RODBC))
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
file_deposit <- "C:/Users/hyber/gym-dbms/R/raw_extract/"
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
users <- readRDS(paste0(file_deposit, "raw.users.RDS"))
region <- readRDS(paste0(file_deposit, "raw.users.RDS"))
staff <- readRDS(paste0(file_deposit, "raw.staff.RDS"))
# Join tables
df <- visits %>%
left_join(select(users, Id, FullName, Gender, Membership),
by = c("UserId" = "Id")) %>%
left_join(select(staff, Id, FullName),
by = c('StaffId' = 'Id'))
# Clean column names
df <- df %>%
rename('Member' = FullName.x,
'Staff' = FullName.y) %>%
select(6:8, 5, 4, 9) %>%
mutate(Time_stamp = as.character(Sys.time()))
# Save df
saveRDS(df, paste0(file_path, "df.RDS"))
}
# read df in
df <- readRDS(paste0(file_path, "df.RDS"))
# Converting to the right data types to SQL
data_types <- sapply(df, function(x) {
if(is.character(x)) return('varchar(100)')
if(is.Date(x)) return('date')
if(is.numeric(x)) return('float')
if(inherits(x, "POSIXct")) return('datetime2')
})
db_con_transformed <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
sqlSave(db_con_transformed,
df,
tablename = 'Transformed',
rownames = F,
append = T,
verbose = F,
varTypes = data_types)
odbcClose(db_con_transformed)
apex_run()
# Load library
suppressPackageStartupMessages(library(RODBC))
suppressPackageStartupMessages(library(lubridate))
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
file_deposit <- "C:/Users/hyber/gym-dbms/R/raw_extract/"
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
# Save into R
saveRDS(raw_users, paste0(file_deposit, "raw.users.RDS"))
saveRDS(raw_visits, paste0(file_deposit, "raw.visits.RDS"))
saveRDS(raw_staff, paste0(file_deposit, "raw.staff.RDS"))
# Disconnect from SQL
odbcClose(db_con_raw)
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
View(visits)
users <- readRDS(paste0(file_deposit, "raw.users.RDS"))
region <- readRDS(paste0(file_deposit, "raw.users.RDS"))
users <- readRDS(paste0(file_deposit, "raw.users.RDS"))
staff <- readRDS(paste0(file_deposit, "raw.staff.RDS"))
# Join tables
df <- visits %>%
left_join(select(users, Id, FullName, Gender, Membership),
by = c("UserId" = "Id")) %>%
left_join(select(staff, Id, FullName),
by = c('StaffId' = 'Id'))
View(df)
# Clean column names
df <- df %>%
rename('Member' = FullName.x,
'Staff' = FullName.y) %>%
select(6:8, 5, 4, 9) %>%
mutate(Time_stamp = as.character(Sys.time()))
# Save df
saveRDS(df, paste0(file_path, "df.RDS"))
# read df in
df <- readRDS(paste0(file_path, "df.RDS"))
# Converting to the right data types to SQL
data_types <- sapply(df, function(x) {
if(is.character(x)) return('varchar(100)')
if(is.Date(x)) return('date')
if(is.numeric(x)) return('float')
if(inherits(x, "POSIXct")) return('datetime2')
})
db_con_transformed <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
sqlSave(db_con_transformed,
df,
tablename = 'Transformed',
rownames = F,
append = T,
verbose = F,
varTypes = data_types)
odbcClose(db_con_transformed)
# Save last_run
last_run_file <- paste0(file_path, "last_run_time.txt")
writeLines(as.character(Sys.time()), last_run_file)
apex_run()
apex_run()
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
# Save into R
saveRDS(raw_users, paste0(file_deposit, "raw.users.RDS"))
saveRDS(raw_visits, paste0(file_deposit, "raw.visits.RDS"))
saveRDS(raw_staff, paste0(file_deposit, "raw.staff.RDS"))
# Disconnect from SQL
odbcClose(db_con_raw)
start_task <- function() {
# Load library
suppressPackageStartupMessages(library(RODBC))
suppressPackageStartupMessages(library(lubridate))
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
file_deposit <- "C:/Users/hyber/gym-dbms/R/raw_extract/"
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
# Save into R
saveRDS(raw_users, paste0(file_deposit, "raw.users.RDS"))
saveRDS(raw_visits, paste0(file_deposit, "raw.visits.RDS"))
saveRDS(raw_staff, paste0(file_deposit, "raw.staff.RDS"))
# Disconnect from SQL
odbcClose(db_con_raw)
}
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
View(raw_visits)
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
mutate(VisitDate = dmy_hms(VisitDate)) #%>%
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
mutate(VisitDate = dmy_hms(VisitDate, tz = "UTC")) #%>%
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
# Run full pipeline
apex_run <- function() {
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
# Get script sources
source(paste0(file_path, "initiate.R"))
source(paste0(file_path, "transformer.R"))
source(paste0(file_path, "closure.R"))
print('Starting connection to raw database server...')
start_task()
print('Closing connection to raw database server...')
# run transformation
print('Transformation step started...')
run_model_1()
print('Transformation step completed...')
# append to Transformed database
print('Starting connection to transformed database server...')
save_transformed_data()
print('Database updated successfully!')
print('Closing connection to transformed database server...')
# Save last_run
last_run_file <- paste0(file_path, "last_run_time.txt")
writeLines(as.character(Sys.time()), last_run_file)
print("'last_run' saved!")
print('Data pipeline completed')
}
apex_run()
# Run full pipeline
apex_run <- function() {
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
# Get script sources
source(paste0(file_path, "initiate.R"))
source(paste0(file_path, "transformer.R"))
source(paste0(file_path, "closure.R"))
print('Starting connection to raw database server...')
start_task()
print('Closing connection to raw database server...')
# run transformation
print('Transformation step started...')
run_model_1()
print('Transformation step completed...')
# append to Transformed database
print('Starting connection to transformed database server...')
save_transformed_data()
print('Database updated successfully!')
print('Closing connection to transformed database server...')
# Save last_run
last_run_file <- paste0(file_path, "last_run_time.txt")
writeLines(as.character(Sys.time()), last_run_file)
print("'last_run' saved!")
print('Data pipeline completed')
}
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
# Run full pipeline
apex_run <- function() {
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
# Get script sources
source(paste0(file_path, "initiate.R"))
source(paste0(file_path, "transformer.R"))
source(paste0(file_path, "closure.R"))
print('Starting connection to raw database server...')
start_task()
print('Closing connection to raw database server...')
# run transformation
print('Transformation step started...')
run_model_1()
print('Transformation step completed...')
# append to Transformed database
print('Starting connection to transformed database server...')
save_transformed_data()
print('Database updated successfully!')
print('Closing connection to transformed database server...')
# Save last_run
last_run_file <- paste0(file_path, "last_run_time.txt")
writeLines(as.character(Sys.time()), last_run_file)
print("'last_run' saved!")
print('Data pipeline completed')
}
apex_run()
apex_run()
run_model_1 <- function() {
# Load libraries
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(RODBC))
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
file_deposit <- "C:/Users/hyber/gym-dbms/R/raw_extract/"
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate < last_run)
users <- readRDS(paste0(file_deposit, "raw.users.RDS"))
staff <- readRDS(paste0(file_deposit, "raw.staff.RDS"))
# Join tables
df <- visits %>%
left_join(select(users, Id, FullName, Gender, Membership),
by = c("UserId" = "Id")) %>%
left_join(select(staff, Id, FullName),
by = c('StaffId' = 'Id'))
# Clean column names
df <- df %>%
rename('Member' = FullName.x,
'Staff' = FullName.y) %>%
select(6:8, 5, 4, 9) %>%
mutate(Time_stamp = as.character(Sys.time()))
# Save df
saveRDS(df, paste0(file_path, "df.RDS"))
}
apex_run()
apex_run()
apex_run()
apex_run()
# Load library
suppressPackageStartupMessages(library(RODBC))
suppressPackageStartupMessages(library(lubridate))
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
file_deposit <- "C:/Users/hyber/gym-dbms/R/raw_extract/"
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
View(raw_visits)
# Set last_run
if(file.exists(paste0(file_path, "last_run_time.txt"))) {
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
} else{
last_run_path <- paste0(file_path, "last_run_time.txt")
start_date <- ymd_hms("2000-01-01 00:00:01", tz = "UTC")
last_run_time <- writeLines(as.character(start_date), last_run_path)
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
}
# Connecting to SQL database (raw data host)
db_con_raw <- odbcConnect('ApexGym', uid = "fico", pwd = "Gym")
# Read data from tables
raw_users <- sqlQuery(db_con_raw, "select * from Users")
raw_visits <- sqlQuery(db_con_raw, "select * from Visits")
raw_staff <- sqlQuery(db_con_raw, "select * from Staff")
# Save into R
saveRDS(raw_users, paste0(file_deposit, "raw.users.RDS"))
saveRDS(raw_visits, paste0(file_deposit, "raw.visits.RDS"))
saveRDS(raw_staff, paste0(file_deposit, "raw.staff.RDS"))
# Disconnect from SQL
odbcClose(db_con_raw)
# Read last_run
last_run <- as.POSIXct(readLines(paste0(file_path, "last_run_time.txt")), tz = "UTC")
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > last_run)
View(visits)
# Read data from tables
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate >dmy_hms(last_run, tz = "UTC"))
# Read data from tables
run <- dmy_hms(last_run, tz = "UTC", locale = F)
# Read data from tables
run <- dmy_hms(last_run, tz = "UTC")
# Read data from tables
run <- dmy_hm(last_run, tz = "UTC")
# Read data from tables
run <-as.character(last_run)
visits <- readRDS(paste0(file_deposit, "raw.visits.RDS")) %>%
filter(VisitDate > run)
View(visits)
apex_run()
apex_run()
# Run full pipeline
apex_run <- function() {
# Set file path
file_path <- "C:/Users/hyber/gym-dbms/R/"
# Get script sources
source(paste0(file_path, "initiate.R"))
source(paste0(file_path, "transformer.R"))
source(paste0(file_path, "closure.R"))
print('Starting connection to raw database server...')
start_task()
print('Closing connection to raw database server...')
# run transformation
print('Transformation step started...')
run_model_1()
print('Transformation step completed...')
# append to Transformed database
print('Starting connection to transformed database server...')
save_transformed_data()
print('Database updated successfully!')
print('Closing connection to transformed database server...')
# Save last_run
last_run_file <- paste0(file_path, "last_run_time.txt")
writeLines(as.character(Sys.time()), last_run_file)
print("'last_run' saved!")
print('Data pipeline closed')
}
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
apex_run()
